# QR Code
# You'll have to scan it to find out what it is.
import pcd8544
from machine import Pin, SPI, ADC
from time import sleep

pins = [36, 39, 34, 35, 32, 33, 25, 26, 27]
ADCs = [ADC(Pin(x)) for x in pins]
# set attenuation
for adc in ADCs:
    adc.atten(ADC.ATTN_11DB)

######## Buttons
left_btn = Pin(1, Pin.IN, Pin.PULL_UP)
right_btn = Pin(3, Pin.IN, Pin.PULL_UP)

######## Display
spi = SPI(1)
spi.init(baudrate=2000000, polarity=0, phase=0)
cs = Pin(15)
dc = Pin(16)
rst = Pin(4)

# backlight on
bl = Pin(17, Pin.OUT, value=0) #
lcd = pcd8544.PCD8544(spi, cs, dc, rst)

import framebuf
buffer = bytearray((pcd8544.HEIGHT // 8) * pcd8544.WIDTH)
fbuf = framebuf.FrameBuffer(buffer, pcd8544.WIDTH, pcd8544.HEIGHT, framebuf.MONO_VLSB)

fbuf.fill(0)

# QR Code - col major msb

qr_2 = bytearray(b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xfc<\x00\x00\x00\x00\x00\x00\x00\x03\xf7\xe4<\x00\x00\x00\x00\x00\x00\x00\x07>\xc6<\x00\x00\x00\x00\x00\x00\x00\x0c\xc3\xc4<\x00\x00\x00\x00\x00\x00\x00\x19?\xe6<\x00\x00\x00\x00\x00\x00\x00\x10\xff\xc28\x00\x00\x00\x00\x00\x00\x00!\xff\xc6<@\x01@\x07\xc0>\x00#\xf7\xe4=\xf8\x07\xf0\x12\xf0K\x80c\xc0:?\xfc\x0f\xf8\x07\xe8\xbf`#\x80\x00?\xfe\x1f|.\xc87\x00G\xc0\x00>><\x1e\x0c\x11`@c\x80\x00<\x1e8\x1e\x06\x000\x00#\xc0|<\x1e\x7f\xfe\x1b\xd0\xbe\x80#\xff\xc6<\x1e\x7f\xff\r\xd0n\x801\xff\xc6<\x0e\x7f\xfe\x07\x90>\x80\x10\xff\xe4<\x1e8\x00\x00\xe0\x06\x80\x19?\xc6<\x1e<\x00P\xd2\x86\x00\x0c\xd2\xc48\x1e?<]\xc2n\x80\x07-\xe6<\x0e\x1f\xfc_\x82\xfc\x00\x03\xff\xc4<\x1e\x07\xf8Z!\xe9\x00\x00\x7f\xfa4\x0c\x03\xd0\x0f\x80<\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00-@\x00\x00\x00\x00\x00\x00\x00\x00\x00?\xf8\x00\x00\x00\x00\x00\x00\x00\x00\x00?\xfc\x00\x00\x00\x00\x00\x00\x00\x00\x00?\xfe\x00\x00\x00\x00\x00\x00\x00\x00\x00<\x1e\x00\x00\x00\x00\x00\x00\x00\x00\x00<\x1e\x00\x00\x00\x00\x00\x00\x00\x00\x00<\x0f\x02\x00\x03\x80<\x00\x00\x00\x00<\x1e\x0f\xee\txK\x80\x00\x00\x00<\x1f\x1f\xfe\x07\xf4\xbf \x00\x00\x00<>?\xfe\x16\xe47@\x00\x00\x00?\xfc|~\x06\x14a@\x00\x00\x00?\xf8x\x1e\x16\x00\xb0\x00\x00\x00\x00?\xe0x\x1f\x13\xc0\xbe\x00\x00\x00\x00<\x00x\x0e\x0f\xe8^\x80\x00\x00\x00<\x00x\x1e\x02\xc8:\x80\x00\x00\x00<\x00x\x1e\x00\xf0\x06\x80\x00\x00\x00<\x00|\x1e \xc2\x06\x80\x00\x00\x00<\x00>\xfeL\xd2\xe6\x00\x00\x00\x00<\x00?\xfe_\xc2\xfc\x80\x00\x00\x00<\x00\x0f\xfe]\x12\xd9\x00\x00\x00\x00<\x00\x07\x8e\x07\xc0~\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00')
qr_2_fbuf = framebuf.FrameBuffer(qr_2, 84, 48, framebuf.MONO_HLSB)
# See qr-code.gif
#qr = bytearray(b'\x7F\x41\x5D\x5D\x5D\x41\x7F\x00\xF6\x1A\xF3\x80\x70\x38\xEB\xB7\x60\x00\x7F\x41\x5D\x5D\x5D\x41\x7F\x47\x8B\xA4\xF5\x96\xF6\x55\x89\x98\x8A\x18\xCB\x72\x9B\x73\x00\xD3\x1E\x7B\x79\xC5\x30\x61\x95\x76\xFD\x05\x74\x75\x75\x04\xFD\x01\xA6\xBD\x96\x91\xBA\xD6\x68\x4F\x9F\xD1\x15\x71\x7F\xBF\x69\x0C\x46\x01\x01\x01\x01\x01\x01\x01\x00\x01\x00\x00\x00\x00\x00\x00\x01\x01\x00\x01\x01\x00\x00\x00\x01\x01')
#qr_fbuf = framebuf.FrameBuffer(qr, 25, 25, framebuf.MONO_VLSB)

#fbuf.blit(qr_fbuf, int((pcd8544.WIDTH-25)/2), int((pcd8544.HEIGHT-25)/2), 0)

x = (pcd8544.WIDTH - 84) // 2  # Center horizontally
y = (pcd8544.HEIGHT - 48) // 2  # Center vertically

fbuf.blit(qr_2_fbuf, x, y, 0)

lcd.clear()
lcd.data(buffer)

while True:
    for i, adc in enumerate(ADCs):
        print(f"Hall sensor {i}: {adc.read()}")
    if not left_btn.value():
        lcd.clear()
        print("Left button pressed")
    if not right_btn.value():
        lcd.data(buffer)
        print("Right button pressed")
    sleep(1)
